# -*- coding: utf-8 -*-
"""Car prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oueNKvXHhntESJtDRbVdLB41dRrDaVw6

CAR PRICE PREDICTION WITH MACHINE LEARINING
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

df = pd.read_csv("/content/car data.csv")

df.head()

"""#Finding Missing Values"""

df.isnull().sum()

df["selling_price"].describe()

df["selling_price"].plot.hist()

sns.boxplot(df["selling_price"])

q1 = df["selling_price"].quantile(0.25)
q3 = df["selling_price"].quantile(0.75)
IQR = q3-q1
IQR

upper_limit = q3 + 1.5*IQR
lower_limit = q1 - 1.5*IQR
upper_limit,lower_limit

def imputer(value):
  if value > upper_limit:
    return upper_limit
  elif value < lower_limit:
    return lower_limit
  else:
    return value

df["selling_price"] = df["selling_price"].apply(imputer)

df.info()

"""#Seperating x and y"""

x = df.drop("selling_price",axis=1)
y = df["selling_price"]

categorical=x.select_dtypes(include="object")

dummy = pd.get_dummies(categorical,drop_first=True)
x = pd.concat([x,dummy],axis=1)
x = x.drop(categorical,axis=1)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=101)

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor()
dt.fit(x_train,y_train)
predictions = model.predict(x_test)

from sklearn.metrics import mean_absolute_error model.score(x_test,predictions)

